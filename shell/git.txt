(bash)

echo commit and push current projet
git remote remove origin
git remote add origin https://github.com/guilhermegor/pyautf.git
git branch -M main
git add .
git commit -m "message"
git push -u origin main

echo first commit
cd "complete\project\path"
REM remove git files from previous pushes
rd .git /S/Q
REM initialize git interaction
git init

echo check differences between added files and git origin
git add .
git status
git diff --cached

echo record all files tracked by git locally
git ls-files
git ls-files > tracked_files.txt

echo get all files published in the branch
git ls-tree -r main --name-only

echo check ignored files by the commit
git check-ignore -v *

echo force git to add untracked files
git add -A
git add -f .
touch src/view/.gitkeep

echo check folders/files ignored by git
cat .gitignore

echo handle errors when creating .gitignore files on windows
git config --global core.autocrlf true
REM warning: in the working copy of '.gitignore', LF will be replaced by CRLF the next time Git touches it
REM refers to the difference in line endings between Unix-based systems (LF - Line Feed) and Windows (CRLF - Carriage Return + Line Feed).
REM: command to always user CRLF for the current working directory on Windows

echo pre-commit initialization
pre-commit install --hook-type commit-msg
git config --global alias.cm '!pre-commit run --all-files && git commit'
git add .
git commit -m "mensagem"

echo commitizen format - keywords to be used in the beginning of the commit message
pattern: (build|ci|docs|feat|fix|perf|refactor|style|test|chore|revert|bump)(\(\S+\))?:\s.*

The commit types listed in the pattern follow the Conventional Commits specification. Each type has a specific purpose for categorizing changes in a codebase. Here's an explanation of each keyword:

build: Changes that affect the build system or external dependencies (e.g., updating npm packages, modifying Dockerfile, or build scripts).
Example: build: update webpack configuration

ci: Changes to the continuous integration configuration or scripts (e.g., GitHub Actions, Jenkins, or CircleCI).
Example: ci: add a job for running end-to-end tests

docs: Documentation changes only (e.g., updating README.md, comments, or wiki pages).
Example: docs: add a usage example to README

feat: A new feature or functionality added to the codebase.
Example: feat: implement user authentication

fix: A bug fix.
Example: fix: resolve issue with login validation

perf: Changes that improve performance.
Example: perf: optimize database query execution time

refactor: Code changes that neither fix a bug nor add a feature (e.g., code restructuring for readability, removing unused code).
Example: refactor: simplify logic in the data processor

style: Changes that do not affect the meaning of the code (e.g., formatting, whitespace, or semicolons).
Example: style: apply consistent indentation in CSS

test: Adding or updating tests (e.g., unit tests, integration tests).
Example: test: add tests for edge cases in date parser

chore: Routine tasks that donâ€™t modify the code (e.g., updating dependencies, renaming files).
Example: chore: update dependencies to latest versions

revert: Reverting a previous commit.
Example: revert: undo feature implementation from commit abc123

bump: Updates to version numbers (typically for dependencies).
Example: bump: upgrade library to version 2.1.0

name: Release to PyPI

on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"
      - "v[0-9]+.[0-9]+.[0-9]+a[0-9]+"
      - "v[0-9]+.[0-9]+.[0-9]+b[0-9]+"
      - "v[0-9]+.[0-9]+.[0-9]+rc[0-9]+"

env:
  PACKAGE_NAME: "stpstone"
  OWNER: "guilhermegor"

jobs:
  automated-tests:
    uses: ./.github/workflows/tests.yaml

  details:
    runs-on: ubuntu-24.04
    needs: automated-tests
    outputs:
      new_version: ${{ steps.release.outputs.new_version }}
      suffix: ${{ steps.release.outputs.suffix }}
      tag_name: ${{ steps.release.outputs.tag_name }}
    steps:
      - name: Check Ref Type
        if: github.ref_type != 'tag'
        run: echo "This is not a tag; exiting"; exit 1

      - name: Extract Tag and Details
        id: release
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          NEW_VERSION=$(echo $TAG_NAME | awk -F'-' '{print $1}')
          SUFFIX=$(echo $TAG_NAME | grep -oP '[a-z]+[0-9]+' || echo "")
          echo "new_version=$NEW_VERSION" >> "$GITHUB_OUTPUT"
          echo "suffix=$SUFFIX" >> "$GITHUB_OUTPUT"
          echo "tag_name=$TAG_NAME" >> "$GITHUB_OUTPUT"

      - name: Debug Outputs
        if: env.RUNNER_DEBUG
        run: |
          echo "Version is $NEW_VERSION"
          echo "Suffix is $SUFFIX"
          echo "Tag name is $TAG_NAME"

  check_pypi:
    needs: details
    runs-on: ubuntu-24.04
    steps:
      - name: Fetch Information from PyPI
        run: |
          response=$(curl -s https://pypi.org/pypi/${{ env.PACKAGE_NAME }}/json || echo "{}")
          latest_previous_version=$(echo $response | grep -oP '"releases":\{"\K[^"]+' | sort -rV | head -n 1)
          if [ -z "$latest_previous_version" ]; then
            echo "Package not found on PyPI."
            latest_previous_version="0.0.0"
          fi
          echo "Latest version on PyPI: $latest_previous_version"
          echo "latest_previous_version=$latest_previous_version" >> $GITHUB_ENV

      - name: Compare Versions - Exit When Not Greater
        run: |
          NEW_VERSION=${{ needs.details.outputs.new_version }}
          LATEST_VERSION=$latest_previous_version
          if [ "$(printf '%s\n' "$LATEST_VERSION" "$NEW_VERSION" | sort -rV | head -n 1)" != "$NEW_VERSION" ] || [ "$NEW_VERSION" == "$LATEST_VERSION" ]; then
            echo "The new version $NEW_VERSION is not greater than the latest version $LATEST_VERSION on PyPI."
            exit 1
          else
            echo "The new version $NEW_VERSION is greater than the latest version $LATEST_VERSION on PyPI."
          fi

  setup_and_build:
    needs: [details, check_pypi]
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        python-version: ["3.12.8"]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set Up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-in-project: true
          virtualenvs-create: true
          version: 2.1.2

      - name: Load Cached Virtual Environment
        id: cached-venv
        uses: actions/cache@v3
        with:
          path: |
            .venv
            poetry.lock
          key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}

      - name: Install Dependencies
        if: steps.cached-venv.outputs.cache-hit != 'true'
        run: |
          # temporary pyproject without windows platform-specific dependencies
          cp pyproject.toml pyproject.original.toml
          cat pyproject.original.toml | python -c '
          import sys, re
          content = sys.stdin.read()
          content = re.sub(r".*platform\s*=\s*\"win32\".*", "", content)
          content = re.sub(r"pywin32\s*=.*\n", "", content)
          print(content)
          ' > pyproject.toml

          # regenerate lock file, if needed
          if ! poetry check --lock; then
            echo "Lock file is outdated, regenerating..."
            rm -f poetry.lock
            poetry lock --no-cache
          fi

          # install all dependencies including dev and docs
          poetry install --no-interaction --no-root

          # restore original pyproject.toml
          mv pyproject.original.toml pyproject.toml
          poetry env activate

      - name: Build Package
        run: |
          if [ ! -d "dist" ] || [ ! -d "dist/${{ env.PACKAGE_NAME }}-${{ needs.details.outputs.new_version }}" ]; then
            echo "Building package for version ${{ needs.details.outputs.new_version }}"
            poetry build
          else
            echo "Package version already built, skipping build step"
          fi

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  pypi_publish:
    needs: setup_and_build
    runs-on: ubuntu-24.04
    environment:
      name: release
    permissions:
      id-token: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set Up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-in-project: true
          virtualenvs-create: true
          version: 2.1.2

      - name: Load Cached Virtual Environment
        id: cached-venv
        uses: actions/cache@v3
        with:
          path: |
            .venv
            poetry.lock
          key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}

      - name: Install Dependencies
        if: steps.cached-venv.outputs.cache-hit != 'true'
        run: |
          # temporary pyproject without windows platform-specific dependencies
          cp pyproject.toml pyproject.original.toml
          cat pyproject.original.toml | python -c '
          import sys, re
          content = sys.stdin.read()
          content = re.sub(r".*platform\s*=\s*\"win32\".*", "", content)
          content = re.sub(r"pywin32\s*=.*\n", "", content)
          print(content)
          ' > pyproject.toml

          # regenerate lock file, if needed
          if ! poetry check --lock; then
            echo "Lock file is outdated, regenerating..."
            rm -f poetry.lock
            poetry lock --no-cache
          fi

          # install all dependencies including dev and docs
          poetry install --no-interaction --no-root

          # restore original pyproject.toml
          mv pyproject.original.toml pyproject.toml
          poetry env activate

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Publish to PyPI
        run: |
          poetry config pypi-token.pypi "${{ secrets.PYPI_TOKEN }}"
          
          yes | poetry publish --build
          
          # fallback to twine
          if [ $? -ne 0 ]; then
            echo "Poetry publish failed, falling back to twine"
            poetry run twine upload \
              --verbose \
              --username "__token__" \
              --password "${{ secrets.PYPI_TOKEN }}" \
              dist/*
          fi

  github_release:
    name: Create GitHub Release
    needs: [setup_and_build, details]
    runs-on: ubuntu-24.04
    env:
      TAG_NAME: ${{ needs.details.outputs.tag_name }}
    permissions:
      contents: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.TAG_NAME }}
          files: |
            dist/*
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ github.token }}